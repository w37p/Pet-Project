package user

import (
	"fmt"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/sirupsen/logrus"
)

type UserPresenter struct {
	bot    *tgbotapi.BotAPI
	logger *logrus.Entry
}

func NewUserPresenter(bot *tgbotapi.BotAPI) *UserPresenter {
	return &UserPresenter{
		bot:    bot,
		logger: logrus.WithField("component", "UserPresenter"),
	}
}

// PresentError –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
func (p *UserPresenter) PresentError(chatID int64, errorMsg string) error {
	msgText := fmt.Sprintf("üö´ –û—à–∏–±–∫–∞: %s", errorMsg)
	msg := tgbotapi.NewMessage(chatID, msgText)

	p.logger.WithFields(logrus.Fields{
		"chatID":   chatID,
		"errorMsg": errorMsg,
	}).Info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ")

	_, err := p.bot.Send(msg)
	if err != nil {
		p.logger.WithError(err).Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
	}
	return err
}

// PresentWelcomeMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Web App –∫–Ω–æ–ø–∫–æ–π.
func (p *UserPresenter) PresentWelcomeMessage(chatID int64, firstName, miniAppURL string) error {
	text := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! –ù–∞ —Å–≤—è–∑–∏ —Å–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ \"–†—ã–±–∞ –∏ –†–∏—Å\".\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑.", firstName)
	webAppButton := tgbotapi.NewInlineKeyboardButtonWebApp("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", tgbotapi.WebAppInfo{
		URL: miniAppURL,
	})
	keyboard := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(webAppButton))
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard

	p.logger.WithFields(logrus.Fields{
		"chatID":     chatID,
		"firstName":  firstName,
		"miniAppURL": miniAppURL,
	}).Info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

	_, err := p.bot.Send(msg)
	if err != nil {
		p.logger.WithError(err).Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
	}
	return err
}
